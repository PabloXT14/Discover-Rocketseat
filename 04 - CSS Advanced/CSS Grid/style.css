/* ========= Global Styling ========== */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
}

/* =========== Other Stylings ==========  */
.title {
    text-align: center;
    margin: 20px 0;
    text-transform: uppercase;
    font-size: 50px;
    font-weight: 900;
    letter-spacing: 5px;
}

.title span {
    display: block;
    margin-bottom: -90px;
    font-size: 20px;
    letter-spacing: normal;
}

.item {
    background-color: #ffb920;
    border: 1.5px solid #111;
    border-radius: 7px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
    font-weight: 900;
    color: #111;
}

.item:hover {
    color: #FFF;
    cursor: pointer;
}


/* CONTAINER */
#container {
    width: 59vw;
    height: 70vh;
    margin: 0 auto;
    background-color: whitesmoke;
    outline: 8px solid #4834D4;

    display: grid;
    /*grid-template-columns: repeat(3, 1fr);*//* especifica o tamanho de cada coluna e o nº de colunas*/
    /* auto: faz com que o espaço extra não preenchido pelas colunas seja preenchido por algum item*/
    /* fr: unidade de fração da grid, divide a grid em frações iguais de acordo com valor adicionado ao fr(1fr 1fr = 50% 50%)*/
    /* repeat(nº de columns/rows, unidade): ex: repeat(3, 1fr)*/
    /* minmax(value min, value max): especifica o tamanho máximo e mínimo que uma certa column ou row terá. ex: minmax(300px, 1fr)*/
    /* repeat(auto-fill, 300px): o "auto-fill" especifica que irá tentar preencher todo o espaço da grid, criando o máximo possível de columns com 300px(neste caso), "MESMO SE NÃO HOUVER ITENS PARA PREENCER TODA A GRID"(deixando colunas em branco na grid) */
    /* repeat(auto-fit, 300px): o "auto-fit" especifica que irá tentar preencher todo o espaço da grid, criando o máximo possível de columns com 300px(neste caso), "SÓ CRIA AS COLUNAS SE TIVERMOS ITENS PARA PREECHÊ-LAS" (não deixando colunas em branco na grid)*/
    /*nomes das linhas das columns: ex: grid-template-columns: [col-start] 1fr [col-2] 1fr [col-3] 1fr [col-end]*/

    /* grid-template-rows: 200px;especifica o tamanho de cada linha e o nº de linhas */
    /* grid-template-rows: 50px 100px; */

    /* grid-auto-columns and grid-auto-rows: server para definir o tamanho de linhas ou colunas que temos a mais no container, onde não foi definido o tamanho. ex: grid-auto-rows: 200px;
    */
    /* grid-auto-rows: 20px; */

    /*grid-auto-flow: controla como o algoritmo de arrumação automática funciona, especificando exatamente como os itens fluirão no grid, se um novo item adicionado vai ser colocado na sequencia da linha ou da coluna
        - row: arrumação automática em linha
        - column: arrumação automática em coluna
        - dense: determina que o algoritmo de arrumação automática use um formato de compactação "denso", que tenta preencher os espaços anteriores do grid caso receba itens menores após. Isto talvez deixe os itens fora de ordem, preenchendo espaços deixados por itens maiores.*/
    /* grid-auto-flow: dense; */

    /*grid-gap: define os espaços entre linhas e colunas.
        - grid-column-gap: espaçamento entre colunas
        - grid-row-gap: espaçamento entre linhas
        - grid-gap(shorthand): <all gap> OR <grid-row-gap> <grid-column-gap>
    */
    /* grid-row-gap: 10px;
    grid-column-gap: 30px;
    */ 
    /* grid-gap: 10px 20px; */

    /*align-items: propriedade que serve para alinhar verticalmente(y-axis) os itens em suas cells na grid, veja alguns values:
        - stretch<default>: deixa os itens esticados o máximo possível dentro da cell, de acordo com os valores do <grid-template-row> e <grid-template-column>
        - start: alinha os itens no começo de sua cell, não ocupando todo o espaço.
        - end: linha os itens no final de sua cell, não ocupando todo o espaço.
        - center: linha os itens no centro de sua cell, não ocupando todo o espaço
    */
    align-items: stretch;
    
    /*justify-items: propriedade que serve para alinhar horizontalmente(x-axis) os itens em suas cells na grid, veja alguns values:
        - stretch<default>: deixa os itens esticados o máximo possível dentro da cell, de acordo com os valores do <grid-template-row> e <grid-template-column>
        - start: alinha todas as cells no começo da grid, não ocupando todo o espaço.
        - end: linha os itens no final de sua cell, não ocupando todo o espaço.
        - center: linha os itens no centro de sua cell, não ocupando todo o espaço
    */
    justify-items: stretch;

    /*place-items: é o "shorthand" do <align-items> e <justify-items>, seguindo a seguinte ordem:
        place-items: <align-items> <justify-items>
        place-items: center;
        place-items: stretch;
    */
    place-items: stretch;

    /* Antes de Ver os "contents" coloque o tamanho de cada column com 50px*/
    
    /*align-content: propriedade que serve para alinhar verticalmente(y-axis) todos as cells/conteudo da grid, ex. de values:
        - start: alinha os itens no começo da grid, não ocupando todo o espaço.
        - end: alinha os itens no final da grid, não ocupando todo o espaço.
        - center: alinha os itens no centro da grid, não ocupando todo o espaço.
        - space-between: alinha os itens deixando um espaço entre eles.
        - space-around: alinha os itens deixando um espaço ao redor deles mesmos.
        - space-evenly: deixa os itens com o mesma quantidade de espaço ao redor(em cima e embaixo) deles
    */
    /* align-content: stretch; */

    /*juntify-content: propriedade que serve para alinhar horizontalmente(y-axis) todos as cells/conteudo da grid, ex. de values:
        - start: alinha os itens no começo da grid, não ocupando todo o espaço.
        - end: alinha os itens no final da grid, não ocupando todo o espaço.
        - center: alinha os itens no centro da grid, não ocupando todo o espaço.
        - space-between: alinha os itens deixando um espaço entre eles.
        - space-around: alinha os itens deixando um espaço ao redor deles mesmos.
        - space-evenly: deixa os itens com o mesma quantidade de espaço ao redor(em left e right) deles
    */
    /* justify-content: start; */

    /*place-content: é o "shorthand" do <align-content> e <justify-content>, seguindo a seguinte ordem:
        place-items: <align-content> <justify-content>
        place-items: center;
    */
    /* place-content: center; */


    /* Para testar a propriedade <grid-template-area> comente todas as outras configurações e ative as divs especificas no index.html*/

    grid-template-columns: [col-start] 1fr [col-2] 1fr [col-3] 1fr [col-end];
    grid-auto-rows: 60px auto 100px;
    /* grid-template-areas: propriedade CSS especifica "áreas de grade"(cells) nomeadas, estabelecendo as células na grade e atribuindo nomes a elas
        - cada "" representa uma row da grid
        - cada nome dentro dos "" representa uma coluna
        - ex:
        "col-1 col-2 col-3" > row1
        "col-1 col-2 col-3" > row2
        - depois você tem que determinar qual vai ser cada item do <grid-template-area> através do <grid-area> dentro de cada item 
    */
    /* grid-template-areas:
    "header header header"
    "main main slidebar"
    "footer footer footer"; */


    /* <grid-template>: é um "shorthand" das propriedades CSS <grid-template-rows>, <grid-template-columns> e <grid-template-areas>,
    seguindo a seguinte ordem
        - grid-template:
        <grid-template-areas> <grid-template-rows>
        / <grid-template-columns>
    */
    grid-template:
    "header header header" 60px
    "main main slidebar" auto
    "footer footer footer" 100px
    / [col-start] 1fr [col-2] 1fr [col-3] 1fr [col-end];

}

.header {
    grid-area: header;
}

.main {
    grid-area: main;
}

.slidebar {
    grid-area: slidebar;
}

.footer {
    grid-area: footer;
}


.a {
    grid-column: 10;
}


/* ========= Respovirity ========== */
/* @media screen and (max-width: 770px) {
    #container {
        grid-template-columns: repeat(1, 1fr);
    }
} */



