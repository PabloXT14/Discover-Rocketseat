/* === Global Settings Styling === */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', Arial, Helvetica, sans-serif;
}

h1 {
    text-align: center;
    text-transform: uppercase;
    /* font-family: 'Roboto'; */
    font-size: 40px;
    font-weight: 900;
    letter-spacing: 10px;
}

h1 span {
    font-size: 15px;
    letter-spacing: 5px;
}



/* CONTAINER */
#container {
    width: 90%;
    height: 400px;
    background-color: #4524FB;
    margin: 80px auto 0;
    border-radius: 8px;

    /* ==== FLEX CONTAINER PROPS ==== */

    display: flex;

    flex-direction: row;
    /* fluxo de direção dos itens dentro do container, some values: 
        - row (default)
        - column
        - row-reverse (os itens começão do final da linha)
        - column-reverse (os itens começão do final da coluna)
    */

    flex-wrap: nowrap;
    /* Por padrão, os flex items vão todos tentar se encaixar em uma só linha. Com o <flex-wrap> você pode modificar esse comportamento e permitir que os ítens quebrem para uma linha seguinte conforme for necessário, some values:
        - nowrap (default): todos os flex items ficarão em uma só linha
        - wrap: os flex items vão quebrar em múltiplas linhas, de cima para baixo
        - wrap-reverse: os flex items vão quebrar em múltiplas linhas de baixo para cima
    */

    flex-flow: row nowrap;
    /* A propriedade <flex-flow> é uma propriedade shorthand (uma mesma declaração inclui vários valores relacionados a mais de uma propriedade) que inclui <flex-direction> e <flex-wrap>. Determina quais serão os eixos pricipal e transversal do container. O valor padrão é row nowrap
        Sintaxe:
            flex-flow: [flex-direction] [flex-wrap]
        Prosp/Value:
            - row nowrap (default)
            - row wrap
            - column nowrap
            - column wrap
    */

    justify-content: flex-start;
    /* Esta propriedade define o alinhamento dos ítens ao longo do main-axis(eixo principal). Values:
        - flex-start (default): os ítens são alinhados junto à borda de início (start) de acordo com qual for a <flex-direction> do container
        - flex-end: os ítens são alinhados junto à borda final (end) de acordo com qual for a <flex-direction> do container
        - center: os ítens são centralizados na linha
        - space-between: os ítens são distribuídos de forma igual ao longo do container(com espaços entre si); o primeiro ítem junto à borda inicial da linha, o último junto à borda final da linha
        - space-around: os ítens são distribuídos na linha com o mesmo espaçamento entre eles. No entanto, como todos os itens tem a mesma margem ao redor algumas partes ficam com mais espaçamento que outras
        - space-evenly: os ítens são distribuídos de forma que o espaçamento entre quaisquer dois itens da linha/container (incluindo entre os ítens e as bordas) seja igual.
    */

    align-items: stretch;
    /* align-items: alinha os itens no Cross Axis
        - stretch (default): faz com que os itens cresçam/estiquem igualmente
        - flex-start: alinha os itens no início do container
        - flex-end: alinha os itens no final do container
        - center: alinha os itens no centro do container.
        - baseline: os itens são alinhados de acordo com o conteúdo dentro deles, em relação a linha de base do cross-axis
            ex: 
            .one {
                padding-top: 70px;
            }
    */

    align-content: stretch;/* obs: adicione mais itens no container p/ testar essa prop */
    /* Esta propriedade é utilizada para alinhas flex-lines (linhas-flexiveis)
        - stretch (default): estica as linhas flexíveis para ocupar o espaço restante do container
        - center: alinha as flex-lines no meio do container
        - flex-start: alinha as flex-lines no início do container
        - flex-end: alinha as flex-lines no fim do container
        - space-between: exibe as linhas flexíveis com espaço igual entre elas
        - space-around: exibe as linhas flexíveis com espaço antes, entre e depois delas (nem todos estes espaços são iguais)
        - space-evenly: exibe as linhas flexíveis com espaço antes, entre e depois delas (com todos os espaços iguais)

    */


}


/* ==== FLEX ITEMS PROPS ==== */
/*
* order: propriedade que especifica o ordem do flex-item (item flexível)
    - order: 0 (default)
    ex: 
    <div class="flex-container">
        <div style="order: 3">1</div>
        <div style="order: 2">2</div>
        <div style="order: 4">3</div>
        <div style="order: 1">4</div>
    </div>

* flex-grow: propriedade que especifica quanto um flex-item irá crescer relativo ao espaço restante/sombrando do container
    - flex-grow: 0 (default)
    ex:
    <div class="flex-container">
        <div style="flex-grow: 1">1</div>
        <div style="flex-grow: 1">2</div>
        <div style="flex-grow: 8">3</div>
    </div>
    - obs: flex-grow: 1 em todos os flex-items deixam todos do mesmo tamanho e ocupando todo o espaço da linha ou coluna

* flex-shrink: propriedade que especifica quanto um flex-item diminuirá em relação aos outros items do container
    - flex-shrink: 1 (default)
    ex:
    <div class="flex-container">
        <div>1</div>
        <div>2</div>
        <div style="flex-shrink: 0">3</div> // este item nao irá diminuir
        <div>4</div>
        <div>5</div>
        <div>6</div>
        <div>7</div>
        <div>8</div>
        <div>9</div>
        <div>10</div>
    </div>
    - obs: coloque mais itens no container para testar essa propriedade, e flex-wrap: nowrap

* flex-basis: propriedade que especifica a largura (width) dos flex-item, semelhante ao width, mas atenção aos seguintes detalhes:
    - o <flex-basis> é sobre posto pelo max-width/min-width
    - o <flex-basis> sobre põe o <flex-shrink>, ou seja, se usar o <flex-basis> os itens não irão diminuir com <flex-shrink>
    ex:
    <div class="flex-container">
        <div>1</div>
        <div>2</div>
        <div style="flex-basis: 200px">3</div>
        <div>4</div>
    </div>

* flex: é um shorthand das propriedades <flex-grow>, <flex-shrink> e <flex-basis>
    ex: 
    <div class="flex-container">
        <div>1</div>
        <div>2</div>
        <div style="flex: 0 0 200px">3</div>
        <div>4</div>
    </div>

* align-self: propriedade que especifica o alinhamento(no Cross-Axis) de um elemento especifico dentro de um container com display flex. Ou seja, o <align-self> sobre põe o <align-items>
*/


/* ===== ATENÇÃO =====
- Para mais detalhes de sobre flexbox:
    * https://www.w3schools.com/css/css3_flexbox.asp
    * https://www.alura.com.br/artigos/css-guia-do-flexbox?gclid=Cj0KCQiAkNiMBhCxARIsAIDDKNUXOtf2w8PYr9bVmK-biqvDh2NzFo1BMeD83463LsZGLOc0QrxkunYaAlQ7EALw_wcB
*/

.item {

    flex: 1 0 150px;/* [flex-grow] [flex-shrink] [flex-basis] */
    /* flex-basis: 150px; */
    /* width: 150px; */
    height: 80px;

    /* min-width: 300px; */

    padding: 20px;
    background-color: #15f831;
    font-size: 2em;
    font-weight: bold;
    border: 1px solid black;
    border-radius: 8px;
    box-shadow: 1px 2px 5px #222;

    display: flex;
    align-items: center;
    justify-content: center;

    cursor: pointer;
    transition: all 0.3s ease;

}

.item:hover {
    color: #FFF;
}

.one {
    order: 0;/* test: 2 */
    flex-grow: 0;/* test: 1 */
    flex-shrink: 1;/* test: 0 */
    /* flex-basis: 500px; */
    align-self: flex-end;
}

.two {
    order: 0;
    /* flex-grow: 0; */
    /* flex-shrink: 1; */
}

.three {
    order: 0;
    /* flex-grow: 0; */
    /* flex-shrink: 1; */
}

.four {
    order: 0;
    /* flex-grow: 0; */
    /* flex-shrink: 1; */
}





